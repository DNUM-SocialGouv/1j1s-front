"use strict";(self.webpackChunk_1j1s_front_docs=self.webpackChunk_1j1s_front_docs||[]).push([[661],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=s,k=c["".concat(i,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(k,o(o({ref:t},p),{},{components:n})):r.createElement(k,o({ref:t},p))}));function k(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:s,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2756:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(7462),s=(n(7294),n(3905));const a={},o="Mocker les m\xe9thodes des interfaces par spyOn",l={unversionedId:"adr/2023-06-06.mocker-les-methodes-des-interfaces-par-spyon",id:"adr/2023-06-06.mocker-les-methodes-des-interfaces-par-spyon",title:"Mocker les m\xe9thodes des interfaces par spyOn",description:"06 juin 2023",source:"@site/docs/adr/2023-06-06.mocker-les-methodes-des-interfaces-par-spyon.md",sourceDirName:"adr",slug:"/adr/2023-06-06.mocker-les-methodes-des-interfaces-par-spyon",permalink:"/1j1s-front/docs/adr/2023-06-06.mocker-les-methodes-des-interfaces-par-spyon",draft:!1,editUrl:"https://github.com/DNUM-SocialGouv/1j1s-front/tree/main/docs/docs/docs/adr/2023-06-06.mocker-les-methodes-des-interfaces-par-spyon.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ne pas utiliser as unknown as MyClass",permalink:"/1j1s-front/docs/adr/2023-05-23.ne-pas-utiliser-as-unknown-as-myclass"},next:{title:"Storybook : Args dans la story",permalink:"/1j1s-front/docs/adr/2023-06-06.storybook-args-dans-la-story"}},i={},u=[{value:"TL;DR",id:"tldr",level:2},{value:"Contributeurs",id:"contributeurs",level:2},{value:"Statut",id:"statut",level:2},{value:"Contexte",id:"contexte",level:2},{value:"D\xe9cision",id:"d\xe9cision",level:2},{value:"Cons\xe9quences",id:"cons\xe9quences",level:2},{value:"Autres pistes explor\xe9es",id:"autres-pistes-explor\xe9es",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"mocker-les-m\xe9thodes-des-interfaces-par-spyon"},"Mocker les m\xe9thodes des interfaces par spyOn"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"06 juin 2023")),(0,s.kt)("h2",{id:"tldr"},"TL;DR"),(0,s.kt)("p",null,"Mocker les m\xe9thodes des interfaces par spyOn (exemple : ",(0,s.kt)("inlineCode",{parentName:"p"},"jest.spyOn(httpClientService, 'get').mockResolvedValue(...)"),")"),(0,s.kt)("h2",{id:"contributeurs"},"Contributeurs"),(0,s.kt)("p",null,"Suxue Li, Julie Brunetto, Guillaume Moizan, Gauthier Fiorentino, Dorian De Rosa, Fred Nobre"),(0,s.kt)("h2",{id:"statut"},"Statut"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Accept\xe9")),(0,s.kt)("h2",{id:"contexte"},"Contexte"),(0,s.kt)("p",null,"Plusieurs mani\xe8res de mocker / stubber une d\xe9pendance, exemple avec la m\xe9thode ",(0,s.kt)("inlineCode",{parentName:"p"},"get")," sur le ",(0,s.kt)("inlineCode",{parentName:"p"},"httpClientService")," :"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"(httpClientService.get as jest.Mock).mockResolvedValue(...)")," "),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"jest.spyOn(httpClientService, 'get').mockResolvedValue(...)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"anHttpClientService({ get: jest.fn(async () => ({...}) })"))),(0,s.kt)("p",null,"Apr\xe8s discussion, l'\xe9quipe s'accorde sur : "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"(httpClientService.get as jest.Mock).mockResolvedValue(...)")," -> Ne plus le faire car plus besoin de red\xe9finir manuellement le type")),(0,s.kt)("p",null,"L'\xe9quipe est divis\xe9e entre le ",(0,s.kt)("inlineCode",{parentName:"p"},"jest.spyOn")," et l'override \xe0 l'instanciation de la classe, pour des raisons de pr\xe9f\xe9rences subjectives de lecture."),(0,s.kt)("p",null,"En utilisation, la m\xe9thode l'override \xe0 l'instanciation de la classe (",(0,s.kt)("inlineCode",{parentName:"p"},"anHttpClientService({ get: jest.fn(async () => ({...}) })"),") pr\xe9sente un d\xe9faut : lorsqu'on veut mocker la m\xeame m\xe9thode pour plusieurs appels, par exemple deux appels, on est oblig\xe9 d'\xe9crire : "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const errorManagementService = anErrorManagementService({\n  handleFailureError: jest.fn(() => createFailure(ErreurM\xe9tier.SERVICE_INDISPONIBLE))\n        .mockImplementationOnce(() => createFailure(ErreurM\xe9tier.DEMANDE_INCORRECTE))\n        .mockImplementationOnce(() => createFailure(ErreurM\xe9tier.CONTENU_INDISPONIBLE),\n});\n")),(0,s.kt)("p",null,"De plus, cette m\xe9thode pr\xe9sente l'inconv\xe9nient de ne pas pouvoir retourner un type union comme Either (Failure | Success) que nous utilisons beaucoup dans le projet. Le type \xe9tant inf\xe9r\xe9 de l'impl\xe9mentation qu'on donne au jest.fn, si cette impl\xe9mentation retourne une Failure comme l'exemple ci-dessus, ",(0,s.kt)("inlineCode",{parentName:"p"},".mockImplementationOnce(() => createSuccess({...})")," ne sera pas accept\xe9."),(0,s.kt)("p",null,"Nous ne voulons pas m\xe9langer deux m\xe9thodes de mock."),(0,s.kt)("h2",{id:"d\xe9cision"},"D\xe9cision"),(0,s.kt)("p",null,"Pour \xe9viter d'avoir deux mani\xe8res de faire, la pr\xe9f\xe9rence est donn\xe9e \xe0 la m\xe9thode :\n",(0,s.kt)("inlineCode",{parentName:"p"},"jest.spyOn(httpClientService, 'get').mockResolvedValue(...)")," (= instancier la fixture de l'interface, et faire un spyOn dessus pour chaque mock qu'on veut mettre en place)"),(0,s.kt)("p",null,"L'\xe9quipe s'accorde aussi sur le fait de ne pas initialiser des m\xe9thodes / valeurs test\xe9es dans un ",(0,s.kt)("inlineCode",{parentName:"p"},"beforeEach")," pour garder des tests\nautoportants."),(0,s.kt)("h2",{id:"cons\xe9quences"},"Cons\xe9quences"),(0,s.kt)("p",null,"Les :"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"(httpClientService.get as jest.Mock).mockResolvedValue(...)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"anHttpClientService({ get: jest.fn(async () => ({...}) })"))),(0,s.kt)("p",null,"et \xe9quivalent sur autres interfaces / m\xe9thodes sont d\xe9pr\xe9ci\xe9s "),(0,s.kt)("h2",{id:"autres-pistes-explor\xe9es"},"Autres pistes explor\xe9es"))}d.isMDXComponent=!0}}]);