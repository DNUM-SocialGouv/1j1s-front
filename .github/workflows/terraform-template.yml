name: D√©ploiement Terraform

# Le d√©ploiement s'√©xecute en 4 temps :
# - un "plan" sur la recette lors d'un push sur une pull_request
# - un "apply" lors du push sur main (hors commit de release)
# - un "plan" sur la production lors d'un push sur une pull_request de release (startsWith(github.head_ref, 'release-please--'))
# - un "apply" lors du push sur main avec un commit de release (github.event.type == 'PushEvent')

on:
  workflow_call:
    inputs:
      lint:
        default: true
        type: boolean
      validate:
        default: true
        type: boolean
      plan:
        default: true
        type: boolean
      apply:
        default: false
        type: boolean
      environnement_name:
        required: true
        type: string
      environnement_url:
        required: true
        type: string
      env_vars_file_path:
        required: false
        type: string
        default: ".env.scalingo"

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environnement_name }}
      url: ${{ inputs.environnement_url }}

    steps:
      - name: T√©l√©charger le code source
        uses: actions/checkout@v4

      - name: Installation de Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          # because of bug hashicorp/terraform#33983, I had to remove "< 2.0.0" and revert to "v1.5.7"
          terraform_version: "1.5.7"

      - name: Exposer tous les secrets comme des variables d'environnement
        if: ${{ (inputs.validate == true) || (inputs.plan == true) || (inputs.apply == true) }}
        uses: Firenza/secrets-to-env@v1.3.0
        with:
          secrets: ${{ toJSON(secrets) }}
          env_var_name_lower_case_regex: (?<=TF_VAR_).*

      - name: Exposer toutes les variables comme des variables d'environnement
        if: ${{ (inputs.validate == true) || (inputs.plan == true) || (inputs.apply == true) }}
        uses: Firenza/secrets-to-env@v1.3.0
        with:
          secrets: ${{ toJSON(vars) }}
          env_var_name_lower_case_regex: (?<=TF_VAR_).*

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Ecrire les variables d'environnement dans un fichier .env
        if: ${{ (inputs.plan == true) || (inputs.apply == true) }}
        run: |
          npm install -g envsub
          envsub --syntax dollar-curly --protect ${ENV_VARS_FILE_PATH} .env
        env:
          ENV_VARS_FILE_PATH: ${{ inputs.env_vars_file_path }}

      - name: V√©rifier que toutes les variables d'environnement sont d√©finies
        run: |
          NUMBER=0
          ENV_FILE=".env"
          REGEX='^([a-zA-Z_]+[a-zA-Z0-9_]*)=\$\{(.*)\}$'

          while read line
          do
            if [[ "$line" =~ $REGEX ]]; then
              echo "ERROR: value is missing for the env ${BASH_REMATCH[2]}"
              ((NUMBER++))
            fi
          done < "$ENV_FILE"

          if [[ $NUMBER -gt 0 ]]; then
            echo "Il y a $NUMBER variables d'environnement non d√©finies, nous ne pouvons pas continuer le d√©ploiement"
            exit 1
          fi

      - name: V√©rifier le format et le style du code Terraform
        if: ${{ inputs.lint == true }}
        id: fmt
        run: terraform fmt -check -diff -recursive ./terraform
        continue-on-error: true

      - name: Terraform Init
        if: ${{ (inputs.validate == true) || (inputs.plan == true) || (inputs.apply == true) }}
        id: init
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform Validate
        if: ${{ inputs.validate == true }}
        id: validate
        working-directory: terraform
        run: terraform validate -no-color

      - name: Terraform Plan
        if: ${{ inputs.plan == true }}
        id: plan
        working-directory: terraform
        run: terraform plan -detailed-exitcode -input=false -no-color
        env:
          TF_VAR_fichier_env_secret: "../.env"
        continue-on-error: true

      - name: Ajouter un commentaire avec le r√©sultat de terraform plan
        if: ${{ (github.event_name == 'pull_request') && (steps.plan.outputs.exitcode == '2') }}
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Simulation des changements d\'infrastruture Terraform sur ${{ inputs.environnement_name }}')
            })

            // 2. Prepare format of the comment
            const output = `### Simulation des changements d'infrastruture Terraform sur ${{ inputs.environnement_name }}
            #### Format et Style du code Terraform üñå : ${{ (steps.fmt.outcome == 'success') && '‚úÖ' || '‚ùå' }}
            #### Validation de la configuration de Terraform (\`validate\`) ü§ñ : ${{ (steps.validate.outcome == 'success') && '‚úÖ' || '‚ùå' }}
            <details><summary>Montrer le r√©sultat de la validation</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ : ${{ (steps.plan.outputs.exitcode == '2') && '‚úÖ' || '‚ùå' }}

            <details><summary>Montrer les modifications pr√©vues par Terraform</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            Pour appliquer les changements propos√©s par ce plan :
            - en recette : il suffit de merger cette PR
            - en production : il faut merger la PR de release (cr√©√©e par release-please)

            *Environnement: \`${{ inputs.environnement_name }}\`, Auteur: @${{ github.actor }}, R√©pertoire: \`./terraform\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Deploiement r√©el des changements
        if: ${{ inputs.apply == true }}
        id: apply
        working-directory: terraform
        run: terraform apply -input=false -no-color -auto-approve
        env:
          TF_VAR_fichier_env_secret: "../.env"
