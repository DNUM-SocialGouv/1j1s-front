name: D√©ploiement Terraform en Recette

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  terraform-recette:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment:
      name: scalingo-recette
      url: https://recette.1jeune1solution.gouv.fr

    steps:
      - name: T√©l√©charger le code source
        uses: actions/checkout@v3

      - name: Installation de Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "< 2.0.0"
      
      - name: V√©rifier le format et le style du code Terraform
        id: fmt
        run: terraform fmt -check -diff -recursive ./terraform
        continue-on-error: true

      - name: Exposer tous les secrets comme des variables d'environnement
        uses: Firenza/secrets-to-env@v1.2.0
        with:
          secrets: ${{ toJSON(secrets) }}
          env_var_name_lower_case_regex: (?<=TF_VAR_).*

      - name: Exposer toutes les variables comme des variables d'environnement
        uses: Firenza/secrets-to-env@v1.2.0
        with:
          secrets: ${{ toJSON(vars) }}
          env_var_name_lower_case_regex: (?<=TF_VAR_).*

      - name: Ecrire les variables d'environnement dans un fichier .env
        run: envsubst < .env.example > .env

      - name: Terraform Init
        id: init
        working-directory: terraform
        run: terraform init -input=false
      
      - name: Terraform Validate
        id: validate
        working-directory: terraform
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: terraform plan -input=false -no-color
        env:
          TF_VAR_front_fichier_env_secret: "../.env"
        continue-on-error: true

      - name: Ajouter un commentaire avec le r√©sultat de terraform plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Format et Style du code Terraform')
            })

            // 2. Prepare format of the comment
            const output = `#### Format et Style du code Terraform üñå : ${{ (steps.fmt.outcome == 'success') && '‚úÖ' || '‚ùå' }}
            #### Initialisation de Terraform (\`init\`) ‚öôÔ∏è : ${{ (steps.init.outcome == 'success') && '‚úÖ' || '‚ùå' }}
            #### Validation de la configuration de Terraform (\`validate\`) ü§ñ : ${{ (steps.validate.outcome == 'success') && '‚úÖ' || '‚ùå' }}
            <details><summary>Montrer le r√©sultat de la validation</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ : ${{ (steps.plan.outcome == 'success') && '‚úÖ' || '‚ùå' }}

            <details><summary>Montrer les modifications pr√©vues par Terraform</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            Pour appliquer les changements propos√©s par ce plan :
            - en recette : il suffit de merger cette PR
            - en production : il faut cr√©er une nouvelle release Github

            *Auteur: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, R√©pertoire: \`./terraform\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Deployer en recette (uniquement une fois merg√©)
        if: github.ref == 'refs/heads/master'
        id: apply
        working-directory: terraform
        run: terraform apply -input=false -no-color
        env:
          TF_VAR_front_fichier_env_secret: "../.env"

env:
  AWS_REGION: "lorem-ipsum"
